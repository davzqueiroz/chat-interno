def gerar_hash_senha(senha):
    return hashlib.sha256(senha.encode()).hexdigest()


with connection() as conn:
    cursor = conn.cursor()
    cursor.execute(f"UPDATE USUARIOS_STREAMLIT SET PASSWORD = '{gerar_hash_senha('1234')}' WHERE USERNAME = 'davi'")

exit()



def connection():
    conn = sqlite3.connect('backend/bank_webchat')
    return conn




# =============================================== TESTE BANCO DE DADOS =================================================
# =============================================== TESTE BANCO DE DADOS =================================================

config = {"credentials": {'usernames': {}}, "cookie": {'expiry_days': 1, 'key': 'some_signature_key', 'name': 'some_cookie_name'}}

with connection() as conn:
    cursor = conn.cursor()
    usernames = cursor.execute(f"SELECT USERNAME FROM USUARIOS_STREAMLIT").fetchall()

    for index, usuario in enumerate(usernames):
        email = cursor.execute(f"SELECT EMAIL FROM USUARIOS_STREAMLIT WHERE USERNAME = '{usuario[0]}'").fetchone()
        failed_login_attempts = cursor.execute(f"SELECT FAILED_LOGIN_ATTEMPTS FROM USUARIOS_STREAMLIT WHERE USERNAME = '{usuario[0]}'").fetchone()
        logged_in = cursor.execute(f"SELECT LOGGED_IN FROM USUARIOS_STREAMLIT WHERE USERNAME = '{usuario[0]}'").fetchone()
        name = cursor.execute(f"SELECT NAME FROM USUARIOS_STREAMLIT WHERE USERNAME = '{usuario[0]}'").fetchone()
        password = cursor.execute(f"SELECT PASSWORD FROM USUARIOS_STREAMLIT WHERE USERNAME = '{usuario[0]}'").fetchone()

        config['credentials']['usernames'][usuario[0]] = {'email': email[0], 'failed_login_attempts': failed_login_attempts[0], 'logged_in': logged_in[0], 'name': name[0], 'password': password[0]}

    print(config)

# Criando objeto autenticador
authenticator = stauth.Authenticate(config['credentials'], config['cookie']['name'], config['cookie']['key'], config['cookie']['expiry_days'])

# ============================================== SIDEBAR + TELA DE LOGIN ===============================================
# ============================================== SIDEBAR + TELA DE LOGIN ===============================================

# Criando widget login
try:
    authenticator.login()
except stauth.utilities.exceptions.LoginError as e:
    st.error(e)

# ========================================== HOME CASO LOGIN ESTEJA FEITO ==============================================
# ========================================== HOME CASO LOGIN ESTEJA FEITO ==============================================

if st.session_state["authentication_status"]: